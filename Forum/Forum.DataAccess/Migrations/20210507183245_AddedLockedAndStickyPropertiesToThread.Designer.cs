// <auto-generated />
using System;
using Forum.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Forum.DataAccess.Migrations
{
    [DbContext(typeof(ForumDbContext))]
    [Migration("20210507183245_AddedLockedAndStickyPropertiesToThread")]
    partial class AddedLockedAndStickyPropertiesToThread
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Forum.DomainClasses.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("5d65bbf0-e88d-4c1a-9141-c2ae28f6ec67"),
                            Name = "Software"
                        },
                        new
                        {
                            CategoryId = new Guid("66577e65-99be-4b99-84ad-964331207f6d"),
                            Name = "Games"
                        },
                        new
                        {
                            CategoryId = new Guid("bdc24be1-399f-4c76-81ee-7c55b30dee0b"),
                            Name = "News"
                        });
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2(7)");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SenderUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("MessageId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Post", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2(7)");

                    b.Property<bool>("Edited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("EditedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("Reported")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("PostId");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = new Guid("6e01990d-e6ca-4c14-816e-82a0139b1d5e"),
                            Content = "Kaspersky Cloud Free is the best free option.",
                            DatePosted = new DateTime(2021, 5, 7, 18, 32, 44, 237, DateTimeKind.Utc).AddTicks(7194),
                            Edited = false,
                            Reported = false,
                            ThreadId = new Guid("43a680eb-6777-4909-a1a8-e67993b85db3"),
                            UserId = new Guid("c3e7c300-0862-410d-8532-16e0f89fe8ec"),
                            Username = "bbsky"
                        },
                        new
                        {
                            PostId = new Guid("b0e1b1e3-d572-4332-917d-db78905351d6"),
                            Content = "Call of Duty: Modern Warfare is the best one so far.",
                            DatePosted = new DateTime(2021, 5, 7, 18, 32, 44, 237, DateTimeKind.Utc).AddTicks(8069),
                            Edited = false,
                            Reported = false,
                            ThreadId = new Guid("fb765719-5817-4fb6-afee-345b82d4ae8e"),
                            UserId = new Guid("c3e7c300-0862-410d-8532-16e0f89fe8ec"),
                            Username = "bbsky"
                        },
                        new
                        {
                            PostId = new Guid("70dc0fa4-8c4c-417c-a7e9-322d3557d9ea"),
                            Content = "Firefox 81.0 has been released.",
                            DatePosted = new DateTime(2021, 5, 7, 18, 32, 44, 237, DateTimeKind.Utc).AddTicks(8085),
                            Edited = false,
                            Reported = false,
                            ThreadId = new Guid("a43c1b4a-60a5-4074-9eb5-425ceb8f7ffc"),
                            UserId = new Guid("758e9b7c-adda-4a70-8caf-adb80b384c97"),
                            Username = "jdoe"
                        },
                        new
                        {
                            PostId = new Guid("4686815c-3802-4170-be76-8b64f6de8784"),
                            Content = "I hope they've patched some of the security holes.",
                            DatePosted = new DateTime(2021, 5, 7, 18, 32, 44, 237, DateTimeKind.Utc).AddTicks(8088),
                            Edited = false,
                            Reported = false,
                            ThreadId = new Guid("a43c1b4a-60a5-4074-9eb5-425ceb8f7ffc"),
                            UserId = new Guid("c3e7c300-0862-410d-8532-16e0f89fe8ec"),
                            Username = "bbsky"
                        });
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Reply", b =>
                {
                    b.Property<Guid>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateReplied")
                        .HasColumnType("datetime2(7)");

                    b.Property<bool>("Edited")
                        .HasColumnType("bit");

                    b.Property<string>("EditedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Reported")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("ReplyId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Replies");

                    b.HasData(
                        new
                        {
                            ReplyId = new Guid("4d46b7dd-2645-4de8-b5de-5004a915edf7"),
                            Content = "I don't agree entirely, Kaspersky it's little bit heavy on resources.",
                            DateReplied = new DateTime(2021, 5, 7, 18, 32, 44, 238, DateTimeKind.Utc).AddTicks(2380),
                            Edited = false,
                            PostId = new Guid("6e01990d-e6ca-4c14-816e-82a0139b1d5e"),
                            Reported = false,
                            UserId = new Guid("758e9b7c-adda-4a70-8caf-adb80b384c97"),
                            Username = "jdoe"
                        },
                        new
                        {
                            ReplyId = new Guid("83385a2b-9ff7-42cb-95ce-508a40878310"),
                            Content = "Amazing graphics, maybe too dynamic for my taste, and the one other thing I don't like, it's the obviouse taking \"sides\". It's game, it should be fun for everyone.",
                            DateReplied = new DateTime(2021, 5, 7, 18, 32, 44, 238, DateTimeKind.Utc).AddTicks(3774),
                            Edited = false,
                            PostId = new Guid("b0e1b1e3-d572-4332-917d-db78905351d6"),
                            Reported = false,
                            UserId = new Guid("758e9b7c-adda-4a70-8caf-adb80b384c97"),
                            Username = "jdoe"
                        },
                        new
                        {
                            ReplyId = new Guid("66c42fe4-3fe3-4c85-b7d7-ce5ac446d5e8"),
                            Content = "Firefox used to be my first choice, with Brave Browser on the market, I think his position is seriously jeopardized.",
                            DateReplied = new DateTime(2021, 5, 7, 18, 32, 44, 238, DateTimeKind.Utc).AddTicks(3799),
                            Edited = false,
                            PostId = new Guid("70dc0fa4-8c4c-417c-a7e9-322d3557d9ea"),
                            Reported = false,
                            UserId = new Guid("c3e7c300-0862-410d-8532-16e0f89fe8ec"),
                            Username = "bbsky"
                        });
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Thread", b =>
                {
                    b.Property<Guid>("ThreadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2(7)");

                    b.Property<bool>("Locked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("Sticky")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("ThreadId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Threads");

                    b.HasData(
                        new
                        {
                            ThreadId = new Guid("43a680eb-6777-4909-a1a8-e67993b85db3"),
                            CategoryId = new Guid("5d65bbf0-e88d-4c1a-9141-c2ae28f6ec67"),
                            DateCreated = new DateTime(2021, 5, 7, 18, 32, 44, 236, DateTimeKind.Utc).AddTicks(7143),
                            Locked = false,
                            Sticky = false,
                            Title = "Best free antivirus"
                        },
                        new
                        {
                            ThreadId = new Guid("fb765719-5817-4fb6-afee-345b82d4ae8e"),
                            CategoryId = new Guid("66577e65-99be-4b99-84ad-964331207f6d"),
                            DateCreated = new DateTime(2021, 5, 7, 18, 32, 44, 236, DateTimeKind.Utc).AddTicks(9560),
                            Locked = false,
                            Sticky = false,
                            Title = "The Best FPS for 2020"
                        },
                        new
                        {
                            ThreadId = new Guid("a43c1b4a-60a5-4074-9eb5-425ceb8f7ffc"),
                            CategoryId = new Guid("bdc24be1-399f-4c76-81ee-7c55b30dee0b"),
                            DateCreated = new DateTime(2021, 5, 7, 18, 32, 44, 236, DateTimeKind.Utc).AddTicks(9597),
                            Locked = false,
                            Sticky = false,
                            Title = "New Version of Firefox has been released"
                        });
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsItAdministrator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Joined")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("Online")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Suspended")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("758e9b7c-adda-4a70-8caf-adb80b384c97"),
                            AccessFailedCount = 0,
                            Avatar = "not set",
                            ConcurrencyStamp = "7a3a9d87-2ae3-4381-8c93-7b0a7cb2e415",
                            Email = "jdoe@email.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            IsItAdministrator = true,
                            Joined = new DateTime(2021, 5, 7, 18, 32, 44, 226, DateTimeKind.Utc).AddTicks(5412),
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JDOE@EMAIL.COM",
                            NormalizedUserName = "JDOE",
                            Online = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEGqkzG1HC9umolefy7aNQ2eqy/Xv82VRUaenInHqGm0qFQo6axPDDPWEMj2Yx2guIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Suspended = false,
                            TwoFactorEnabled = false,
                            UserName = "jdoe"
                        },
                        new
                        {
                            Id = new Guid("c3e7c300-0862-410d-8532-16e0f89fe8ec"),
                            AccessFailedCount = 0,
                            Avatar = "not set",
                            ConcurrencyStamp = "f92d468c-268f-4f34-bc24-bd11212ed240",
                            Email = "bbsky@email.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            IsItAdministrator = false,
                            Joined = new DateTime(2021, 5, 7, 18, 32, 44, 235, DateTimeKind.Utc).AddTicks(4352),
                            LastName = "Bobsky",
                            LockoutEnabled = false,
                            NormalizedEmail = "BBSKY@EMAIL.COM",
                            NormalizedUserName = "BBSKY",
                            Online = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEBd+WOePvyy+RfiyUM/AitN/7YK2ICgIfHRtCd/B8qos/GX1XtiRrUatRvYyNyopfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Suspended = false,
                            TwoFactorEnabled = false,
                            UserName = "bbsky"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("803735fe-075e-4a1b-867a-6690d1368193"),
                            ConcurrencyStamp = "5792793f-aae0-4046-8a6b-d600db412d66",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("9f670e0c-b025-4f46-8c46-d8dda4cb81b1"),
                            ConcurrencyStamp = "995cf5c8-d5f0-4d57-95d8-c941c474497b",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("758e9b7c-adda-4a70-8caf-adb80b384c97"),
                            RoleId = new Guid("803735fe-075e-4a1b-867a-6690d1368193")
                        },
                        new
                        {
                            UserId = new Guid("c3e7c300-0862-410d-8532-16e0f89fe8ec"),
                            RoleId = new Guid("9f670e0c-b025-4f46-8c46-d8dda4cb81b1")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Message", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Post", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.Thread", "Thread")
                        .WithMany("Posts")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forum.DomainClasses.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Reply", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.Post", "Post")
                        .WithMany("Replies")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forum.DomainClasses.Models.User", "User")
                        .WithMany("Replies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Thread", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.Category", "Category")
                        .WithMany("Threads")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forum.DomainClasses.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
