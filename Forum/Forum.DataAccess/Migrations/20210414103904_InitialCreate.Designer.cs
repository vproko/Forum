// <auto-generated />
using System;
using Forum.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Forum.DataAccess.Migrations
{
    [DbContext(typeof(ForumDbContext))]
    [Migration("20210414103904_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Forum.DomainClasses.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("0b396523-b393-4b7f-aeaf-0bb8d71fda20"),
                            Name = "Software"
                        },
                        new
                        {
                            CategoryId = new Guid("01e122dc-a2d1-4dd0-84d8-ac67b9b8a706"),
                            Name = "Games"
                        },
                        new
                        {
                            CategoryId = new Guid("71a55080-aff8-4934-9daf-0aec280fe183"),
                            Name = "News"
                        });
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2(7)");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SenderUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("MessageId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Post", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2(7)");

                    b.Property<bool>("Reported")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("PostId");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = new Guid("7a8eb558-6ba1-4a9b-aaa0-f5d30afedbac"),
                            Content = "Kaspersky Cloud Free is the best free option.",
                            DatePosted = new DateTime(2021, 4, 14, 10, 39, 3, 963, DateTimeKind.Utc).AddTicks(8541),
                            Reported = false,
                            ThreadId = new Guid("4dc1f058-4bab-4d2e-879f-8496ef338d10"),
                            UserId = new Guid("7723ac91-5d1a-4f94-ae01-a0ab6b45db4f"),
                            Username = "bbsky"
                        },
                        new
                        {
                            PostId = new Guid("d02bc654-24ef-426e-86ad-ce3160bbf7e0"),
                            Content = "Call of Duty: Modern Warfare is the best one so far.",
                            DatePosted = new DateTime(2021, 4, 14, 10, 39, 3, 963, DateTimeKind.Utc).AddTicks(9410),
                            Reported = false,
                            ThreadId = new Guid("e2a4ed51-c840-445d-a3eb-f3f91dab6441"),
                            UserId = new Guid("7723ac91-5d1a-4f94-ae01-a0ab6b45db4f"),
                            Username = "bbsky"
                        },
                        new
                        {
                            PostId = new Guid("e38b2327-3c5d-4a01-9a51-39b441adad8e"),
                            Content = "Firefox 81.0 has been released.",
                            DatePosted = new DateTime(2021, 4, 14, 10, 39, 3, 963, DateTimeKind.Utc).AddTicks(9429),
                            Reported = false,
                            ThreadId = new Guid("e170d035-857b-4a70-865b-87bef7051cbb"),
                            UserId = new Guid("df07adf2-d1b1-46e8-89a0-7ad42d6ade53"),
                            Username = "jdoe"
                        },
                        new
                        {
                            PostId = new Guid("34df0d97-a06d-4089-ac20-5987b0090357"),
                            Content = "I hope they've patched some of the security holes.",
                            DatePosted = new DateTime(2021, 4, 14, 10, 39, 3, 963, DateTimeKind.Utc).AddTicks(9432),
                            Reported = false,
                            ThreadId = new Guid("e170d035-857b-4a70-865b-87bef7051cbb"),
                            UserId = new Guid("7723ac91-5d1a-4f94-ae01-a0ab6b45db4f"),
                            Username = "bbsky"
                        });
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Reply", b =>
                {
                    b.Property<Guid>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateReplied")
                        .HasColumnType("datetime2(7)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Reported")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ReplyId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Replies");

                    b.HasData(
                        new
                        {
                            ReplyId = new Guid("ca855024-65b6-4ce3-9239-d78059573849"),
                            Content = "I don't agree entirely, Kaspersky it's little bit heavy on resources",
                            DateReplied = new DateTime(2021, 4, 14, 10, 39, 3, 964, DateTimeKind.Utc).AddTicks(4225),
                            PostId = new Guid("7a8eb558-6ba1-4a9b-aaa0-f5d30afedbac"),
                            Reported = false,
                            UserId = new Guid("df07adf2-d1b1-46e8-89a0-7ad42d6ade53"),
                            Username = "jdoe"
                        },
                        new
                        {
                            ReplyId = new Guid("415e7732-dc05-476f-a7b0-e1fa0d3a576f"),
                            Content = "Amazing graphics, maybe too dynamic for my taste, and the one other thing I don't like, it's the obviouse taking \"sides\". It's game, it should be fun for everyone",
                            DateReplied = new DateTime(2021, 4, 14, 10, 39, 3, 964, DateTimeKind.Utc).AddTicks(5058),
                            PostId = new Guid("d02bc654-24ef-426e-86ad-ce3160bbf7e0"),
                            Reported = false,
                            UserId = new Guid("df07adf2-d1b1-46e8-89a0-7ad42d6ade53"),
                            Username = "jdoe"
                        },
                        new
                        {
                            ReplyId = new Guid("56b62391-774e-4e8e-b860-6d750e58b74c"),
                            Content = "Firefox used to be my first choice, with Brave Browser on the market, I think his position is seriously jeopardized",
                            DateReplied = new DateTime(2021, 4, 14, 10, 39, 3, 964, DateTimeKind.Utc).AddTicks(5077),
                            PostId = new Guid("e38b2327-3c5d-4a01-9a51-39b441adad8e"),
                            Reported = false,
                            UserId = new Guid("7723ac91-5d1a-4f94-ae01-a0ab6b45db4f"),
                            Username = "bbsky"
                        });
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Thread", b =>
                {
                    b.Property<Guid>("ThreadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("ThreadId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Threads");

                    b.HasData(
                        new
                        {
                            ThreadId = new Guid("4dc1f058-4bab-4d2e-879f-8496ef338d10"),
                            CategoryId = new Guid("0b396523-b393-4b7f-aeaf-0bb8d71fda20"),
                            DateCreated = new DateTime(2021, 4, 14, 10, 39, 3, 963, DateTimeKind.Utc).AddTicks(873),
                            Title = "Best free antivirus"
                        },
                        new
                        {
                            ThreadId = new Guid("e2a4ed51-c840-445d-a3eb-f3f91dab6441"),
                            CategoryId = new Guid("01e122dc-a2d1-4dd0-84d8-ac67b9b8a706"),
                            DateCreated = new DateTime(2021, 4, 14, 10, 39, 3, 963, DateTimeKind.Utc).AddTicks(1688),
                            Title = "The Best FPS for 2020"
                        },
                        new
                        {
                            ThreadId = new Guid("e170d035-857b-4a70-865b-87bef7051cbb"),
                            CategoryId = new Guid("71a55080-aff8-4934-9daf-0aec280fe183"),
                            DateCreated = new DateTime(2021, 4, 14, 10, 39, 3, 963, DateTimeKind.Utc).AddTicks(1706),
                            Title = "New Version of Firefox has been released"
                        });
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsItAdministrator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Joined")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("Online")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Suspended")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("df07adf2-d1b1-46e8-89a0-7ad42d6ade53"),
                            AccessFailedCount = 0,
                            Avatar = "not set",
                            ConcurrencyStamp = "2873d1f9-d28c-44cc-b9a5-dfe50dbb6283",
                            Email = "jdoe@email.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            IsItAdministrator = true,
                            Joined = new DateTime(2021, 4, 14, 10, 39, 3, 953, DateTimeKind.Utc).AddTicks(2860),
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JDOE@EMAIL.COM",
                            NormalizedUserName = "JDOE",
                            Online = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEHbTq3PqwswBg5ONHOxTzbyytofNm+DNy7p1fsJC0Jm0wM+XPiQU+Qrr92NKziHaEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Suspended = false,
                            TwoFactorEnabled = false,
                            UserName = "jdoe"
                        },
                        new
                        {
                            Id = new Guid("7723ac91-5d1a-4f94-ae01-a0ab6b45db4f"),
                            AccessFailedCount = 0,
                            Avatar = "not set",
                            ConcurrencyStamp = "7b991f8a-35fe-4886-9f29-92c42e808804",
                            Email = "bbsky@email.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            IsItAdministrator = false,
                            Joined = new DateTime(2021, 4, 14, 10, 39, 3, 961, DateTimeKind.Utc).AddTicks(8509),
                            LastName = "Bobsky",
                            LockoutEnabled = false,
                            NormalizedEmail = "BBSKY@EMAIL.COM",
                            NormalizedUserName = "BBSKY",
                            Online = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPnb5dnEyxXmBixFfHsC7sEKR7DJ5sO0Kyx5KHxBsSKchOHiJ+cNL6BeQoA6FfX8zA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Suspended = false,
                            TwoFactorEnabled = false,
                            UserName = "bbsky"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("90f45d03-e309-42ab-82ef-b9f71ca3d138"),
                            ConcurrencyStamp = "e034c462-44df-4909-b2b5-b283c55e80da",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("415a3ffd-f34f-43b2-ac94-2bb0a351b77d"),
                            ConcurrencyStamp = "46748b78-e7db-411a-b31e-d81a9f7fcbf6",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("df07adf2-d1b1-46e8-89a0-7ad42d6ade53"),
                            RoleId = new Guid("90f45d03-e309-42ab-82ef-b9f71ca3d138")
                        },
                        new
                        {
                            UserId = new Guid("7723ac91-5d1a-4f94-ae01-a0ab6b45db4f"),
                            RoleId = new Guid("415a3ffd-f34f-43b2-ac94-2bb0a351b77d")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Message", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Post", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.Thread", "Thread")
                        .WithMany("Posts")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forum.DomainClasses.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Reply", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.Post", "Post")
                        .WithMany("Replies")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forum.DomainClasses.Models.User", "User")
                        .WithMany("Replies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Thread", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.Category", "Category")
                        .WithMany("Threads")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forum.DomainClasses.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
